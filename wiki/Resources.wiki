#summary Tutorials, External Links, Code Samples
#labels Phase-Implementation,Featured
= Documentation =

Each RPC type is based on a AbstractRPCObject which mimics the native [RemoteObject http://livedocs.macromedia.com/flex/2/langref/]. Since the implementation is the same for the different RPC types (AMF0,XML-RPC and JSON-RPC), AbstractObject will be used to generalize them in the examples. Simple replace `<ak33m:AbstractObject>` with the appropriate tags:


|| *RPC Type* || *Package* || *AS Class* || *MXML Tag* ||
|| AMF0 (Flash Remoting) || `com.ak33m.rpc.amf0.*` || `AMF0Object` || `<ak33m:AMF0Object>` ||
|| XML-RPC || `com.ak33m.rpc.xmlrpc.*` || `XMLRPCObject` || `<ak33m:XMLRPCObject>` ||
||JSON-RPC || `com.ak33m.rpc.jsonrpc.*` || `JSONRPCObject`|| `<ak33m:JSONRPCObject>` ||


Example:
{{{
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:ak33m="http://ak33m.com/mxml" creationComplete="callFunction();">
    <mx:Script>
       <![CDATA[
         import mx.controls.Alert;
         function callFunction ()
         {
           //sample method call
           someapi.doSomeThing(param1,param2);
          //sample method call if method has a dot (.) (as is the case with blog xmlrpc API
          someapi.call("method.with.dot",param1,param2);
         }
      ]]>
   </mx:Script>
    <ak33m:AbstractObject id="someapi" endpoint="http://ak33m.com" destination="someendpoint" fault="Alert.show(event.fault.faultString,event.fault.faultCode)">
    </ak33m:AbstractObject>
</mx:Application>
}}}
= External Links=

*Specifications*
  * [http://www.xmlrpc.com/spec XML-RPC]
  * [http://json-rpc.org/wiki/specification JSON-RPC]










